spring.application.name=my-provider
server.port=8092
spring.datasource.url=jdbc:mysql://localhost:3306/myownmysql?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=liu19940322
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Mybatis
spring.mybatis.mapperPackage=/mapper/*Mapper.xml
spring.mybatis.dialect=MYSQL
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
mybatis.type-aliases-package=com.example.springcloudtest.entity

#showSql
#mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
#spring.mybatis.mapper-locations=classpath*:mybatis/**/*.xml

#showSql
logging.level.com.example.springcloudtest.mapping=info


#thymeleaf模板配置前后缀

#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#
#logging.level.com.dy.springboot.server.mapper=debug
##扫描mybatis的mapper
#mybatis.type-aliases-package=com.zy.blog.dao
##mybatis的mapper.xml文件位置
#mybatis.mapper-locations=classpath:mybatis/*.xml
#//开启驼峰标识
#mybatis.configuration.map-underscore-to-camel-case=true
#mybatis.configuration.log-impl= org.apache.ibatis.logging.stdout.StdOutImpl

#配置rabbitMq 服务器
# rabbitmq 服务所在ip
spring.rabbitmq.host=localhost

# rabbitmq 端口
spring.rabbitmq.port=5672

# rabbitmq 账号
spring.rabbitmq.username=guest

# rabbitmq 密码
spring.rabbitmq.password=guest
#虚拟host 可以不设置,使用server默认host
#virtual-host: JCcccHost

#Redis
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000


#该客户端是否可用
eureka.client.enabled=true
#实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true
eureka.client.register-with-eureka=true
#此客户端是否获取eureka服务器注册表上的注册信息，默认为true
eureka.client.fetch-registry=true
#是否过滤掉，非UP的实例。默认为true
eureka.client.filter-only-up-instances=true
#与Eureka注册服务中心的通信zone和url地址
eureka.client.serviceUrl.defaultZone=http://localhost:8762/eureka/

#client连接Eureka服务端后的空闲等待时间，默认为30 秒
eureka.client.eureka-connection-idle-timeout-seconds=30
#client连接eureka服务端的连接超时时间，默认为5秒
eureka.client.eureka-server-connect-timeout-seconds=5
#client对服务端的读超时时长
eureka.client.eureka-server-read-timeout-seconds=8
#client连接all eureka服务端的总连接数，默认200
eureka.client.eureka-server-total-connections=200
#client连接eureka服务端的单机连接数量，默认50
eureka.client.eureka-server-total-connections-per-host=50
#执行程序指数回退刷新的相关属性，是重试延迟的最大倍数值，默认为10
eureka.client.cache-refresh-executor-exponential-back-off-bound=10
#执行程序缓存刷新线程池的大小，默认为5
eureka.client.cache-refresh-executor-thread-pool-size=2
#心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10
eureka.client.heartbeat-executor-exponential-back-off-bound=10
#心跳执行程序线程池的大小,默认为5
eureka.client.heartbeat-executor-thread-pool-size=5
# 询问Eureka服务url信息变化的频率（s），默认为300秒
eureka.client.eureka-service-url-poll-interval-seconds=300
#最初复制实例信息到eureka服务器所需的时间（s），默认为40秒
eureka.client.initial-instance-info-replication-interval-seconds=40
#间隔多长时间再次复制实例信息到eureka服务器，默认为30秒
eureka.client.instance-info-replication-interval-seconds=30
#从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒
eureka.client.registry-fetch-interval-seconds=30

## 获取实例所在的地区。默认为us-east-1
#eureka.client.region=us-east-1
##实例是否使用同一zone里的eureka服务器，默认为true，理想状态下，eureka客户端与服务端是在同一zone下
#eureka.client.prefer-same-zone-eureka=true
## 获取实例所在的地区下可用性的区域列表，用逗号隔开。（AWS）
#eureka.client.availability-zones.china=defaultZone,defaultZone1,defaultZone2
##eureka服务注册表信息里的以逗号隔开的地区名单，如果不这样返回这些地区名单，则客户端启动将会出错。默认为null
#eureka.client.fetch-remote-regions-registry=
##服务器是否能够重定向客户端请求到备份服务器。 如果设置为false，服务器将直接处理请求，如果设置为true，它可能发送HTTP重定向到客户端。默认为false
#eureka.client.allow-redirects=false
##客户端数据接收
#eureka.client.client-data-accept=
##增量信息是否可以提供给客户端看，默认为false
#eureka.client.disable-delta=false
##eureka服务器序列化/反序列化的信息中获取“_”符号的的替换字符串。默认为“__“
#eureka.client.escape-char-replacement=__
##eureka服务器序列化/反序列化的信息中获取“$”符号的替换字符串。默认为“_-”
#eureka.client.dollar-replacement="_-"
##当服务端支持压缩的情况下，是否支持从服务端获取的信息进行压缩。默认为true
#eureka.client.g-zip-content=true
##是否记录eureka服务器和客户端之间在注册表的信息方面的差异，默认为false
#eureka.client.log-delta-diff=false
## 如果设置为true,客户端的状态更新将会点播更新到远程服务器上，默认为true
#eureka.client.on-demand-update-status-change=true
##此客户端只对一个单一的VIP注册表的信息感兴趣。默认为null
#eureka.client.registry-refresh-single-vip-address=
##client是否在初始化阶段强行注册到服务中心，默认为false
#eureka.client.should-enforce-registration-at-init=false
##client在shutdown的时候是否显示的注销服务从服务中心，默认为true
#eureka.client.should-unregister-on-shutdown=true
#
## 获取eureka服务的代理主机，默认为null
#eureka.client.proxy-host=
##获取eureka服务的代理密码，默认为null
#eureka.client.proxy-password=
## 获取eureka服务的代理端口, 默认为null
#eureka.client.proxy-port=
## 获取eureka服务的代理用户名，默认为null
#eureka.client.proxy-user-name=
#
##属性解释器
#eureka.client.property-resolver=
##获取实现了eureka客户端在第一次启动时读取注册表的信息作为回退选项的实现名称
#eureka.client.backup-registry-impl=
##这是一个短暂的×××的配置，如果最新的×××是稳定的，则可以去除，默认为null
#eureka.client.decoder-name=
##这是一个短暂的编码器的配置，如果最新的编码器是稳定的，则可以去除，默认为null
#eureka.client.encoder-name=
#
##是否使用DNS机制去获取服务列表，然后进行通信。默认为false
#eureka.client.use-dns-for-fetching-service-urls=false
##获取要查询的DNS名称来获得eureka服务器，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null
#eureka.client.eureka-server-d-n-s-name=
##获取eureka服务器的端口，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null
#eureka.client.eureka-server-port=
##表示eureka注册中心的路径，如果配置为eureka，则为http://x.x.x.x:x/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null
#eureka.client.eureka-server-u-r-l-context=
